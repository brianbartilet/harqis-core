"""Test cases for '{{docs.description}}' service"""
import pytest
from {{imports.path}}.config import CONFIG

{{#imports.services.items}}
from {{imports.services.path}}.{{name}} import Service{{class_name}}
{{/imports.services.items}}

{{#imports.models.items}}
from {{imports.models.path}}.{{name}} import {{class_name}}
{{/imports.models.items}}

"""
Add more imports as needed

"""


@pytest.fixture()
def setup_service_{{functions.setup.service_name}}():
    """
    Setup fixture for the tests

    """
    given = Service{{functions.setup.service_class_name}}(CONFIG)
    when = None
    then = given.verify.common

    return given, when, then


#  region Sanity Tests

{{#tests.items}}
@pytest.mark.{{test_suite_name}}
def test_{{name}}(setup_service_{{data.service_name}}):
    """
    {{description}}
    """
    given, when, then = setup_service_{{data.service_name}}
    {{#not_implemented}}raise NotImplementedError("Test not yet implemented."){{/not_implemented}}
    {{#given}}
    {{/given}}
    {{#when}}
    {{#data.has_payload}}
    payload_{{data.payload.name}} = {{{data.payload.class_name}}}()
    {{/data.has_payload}}
    when = given.{{name}}({{#data.has_payload}}payload=payload_{{data.payload.name}}{{/data.has_payload}}{{#args}}{{name}}={{{schema.example}}}{{#not_last}}, {{/not_last}}{{/args}})
    {{/when}}
    {{#then}}
    then.common.assert_that(when.status_code, then.equal_to({{data.http_status}}))
    {{/then}}


{{/tests.items}}
#  endregion

